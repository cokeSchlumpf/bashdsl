/*
 * generated by Xtext
 */
package com.wellnr.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.wellnr.services.BashDSLGrammarAccess;

public class BashDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private BashDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.wellnr.ui.contentassist.antlr.internal.InternalBashDSLParser createParser() {
		com.wellnr.ui.contentassist.antlr.internal.InternalBashDSLParser result = new com.wellnr.ui.contentassist.antlr.internal.InternalBashDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getScriptAccess().getGroup(), "rule__Script__Group__0");
					put(grammarAccess.getScriptAccess().getGroup_3(), "rule__Script__Group_3__0");
					put(grammarAccess.getArgumentAccess().getGroup(), "rule__Argument__Group__0");
					put(grammarAccess.getArgumentAccess().getGroup_3(), "rule__Argument__Group_3__0");
					put(grammarAccess.getDomainmodelAccess().getElementsAssignment(), "rule__Domainmodel__ElementsAssignment");
					put(grammarAccess.getScriptAccess().getNameAssignment_1(), "rule__Script__NameAssignment_1");
					put(grammarAccess.getScriptAccess().getDescriptionAssignment_2(), "rule__Script__DescriptionAssignment_2");
					put(grammarAccess.getScriptAccess().getCopyrightAssignment_3_1(), "rule__Script__CopyrightAssignment_3_1");
					put(grammarAccess.getScriptAccess().getArgumentsAssignment_5(), "rule__Script__ArgumentsAssignment_5");
					put(grammarAccess.getScriptAccess().getCodeAssignment_6(), "rule__Script__CodeAssignment_6");
					put(grammarAccess.getArgumentAccess().getOptionalAssignment_0(), "rule__Argument__OptionalAssignment_0");
					put(grammarAccess.getArgumentAccess().getNameAssignment_2(), "rule__Argument__NameAssignment_2");
					put(grammarAccess.getArgumentAccess().getDefaultAssignment_3_1(), "rule__Argument__DefaultAssignment_3_1");
					put(grammarAccess.getArgumentAccess().getDescriptionAssignment_4(), "rule__Argument__DescriptionAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.wellnr.ui.contentassist.antlr.internal.InternalBashDSLParser typedParser = (com.wellnr.ui.contentassist.antlr.internal.InternalBashDSLParser) parser;
			typedParser.entryRuleDomainmodel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public BashDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(BashDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
