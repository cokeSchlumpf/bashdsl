/**
 * generated by Xtext
 */
package com.wellnr.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import com.google.inject.Inject;
import com.wellnr.bashDSL.Argument;
import com.wellnr.bashDSL.Script;
import com.wellnr.generator.StringUtil;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class BashDSLGenerator implements IGenerator {
  @Inject
  @Extension
  private StringUtil stringUtil;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterator<Script> _filter = Iterators.<Script>filter(_allContents, Script.class);
    final Procedure1<Script> _function = (Script script) -> {
      String _name = script.getName();
      String _plus = (_name + ".sh");
      CharSequence _doGenerate = this.doGenerate(script);
      String _string = _doGenerate.toString();
      fsa.generateFile(_plus, _string);
    };
    IteratorExtensions.<Script>forEach(_filter, _function);
  }
  
  private CharSequence doGenerate(final Script script) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#!/bin/bash");
    _builder.newLine();
    _builder.append("#");
    _builder.newLine();
    _builder.append("# (c) ");
    {
      String _copyright = script.getCopyright();
      boolean _notEquals = (!Objects.equal(_copyright, null));
      if (_notEquals) {
        _builder.append(" ");
        String _copyright_1 = script.getCopyright();
        _builder.append(_copyright_1, "");
        _builder.append(" ");
      } else {
        _builder.append("michael.wellner@de.ibm.com ");
        Calendar _instance = Calendar.getInstance();
        int _get = _instance.get(Calendar.YEAR);
        _builder.append(_get, "");
        _builder.append(".");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("#");
    _builder.newLine();
    CharSequence _doGenerateHelp = this.doGenerateHelp(script);
    String _string = _doGenerateHelp.toString();
    String _comment = this.stringUtil.comment(_string);
    _builder.append(_comment, "");
    _builder.newLineIfNotEmpty();
    _builder.append("#");
    _builder.newLine();
    _builder.newLine();
    EList<Argument> _arguments = script.getArguments();
    CharSequence _doGenerateInitialize = this.doGenerateInitialize(_arguments);
    _builder.append(_doGenerateInitialize, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("main() {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("read_variables $@");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("check_required");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("init_defaults");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    String _code = script.getCode();
    String _replace = _code.replace("\"\"\"", "");
    String _trimLines = this.stringUtil.trimLines(_replace);
    _builder.append(_trimLines, "  ");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("check_required() {");
    _builder.newLine();
    _builder.append("  ");
    EList<Argument> _arguments_1 = script.getArguments();
    CharSequence _doGenerateCheck = this.doGenerateCheck(_arguments_1);
    _builder.append(_doGenerateCheck, "  ");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("init_defaults() {");
    _builder.newLine();
    _builder.append("\t");
    EList<Argument> _arguments_2 = script.getArguments();
    CharSequence _doGenerateDefaults = this.doGenerateDefaults(_arguments_2);
    _builder.append(_doGenerateDefaults, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("read_variables() {");
    _builder.newLine();
    _builder.append("  ");
    EList<Argument> _arguments_3 = script.getArguments();
    CharSequence _doGenerateRead = this.doGenerateRead(_arguments_3);
    _builder.append(_doGenerateRead, "  ");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("show_help_and_exit() {");
    _builder.newLine();
    _builder.append("  ");
    CharSequence _doGenerateHelp_1 = this.doGenerateHelp(script);
    String _string_1 = _doGenerateHelp_1.toString();
    String _echo = this.stringUtil.echo(_string_1);
    _builder.append(_echo, "  ");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("echo");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("sleep 3");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exit $1");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("main $@");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence doGenerateCheck(final List<Argument> arguments) {
    StringConcatenation _builder = new StringConcatenation();
    {
      final Function1<Argument, Boolean> _function = (Argument it) -> {
        boolean _isOptional = it.isOptional();
        return Boolean.valueOf((!_isOptional));
      };
      Iterable<Argument> _filter = IterableExtensions.<Argument>filter(arguments, _function);
      for(final Argument arg : _filter) {
        _builder.append("if [ -z \"");
        String _name = arg.getName();
        CharSequence _variable = this.stringUtil.variable(_name);
        _builder.append(_variable, "");
        _builder.append("\"]; then");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append(">&2 echo \"Missing required parameter: ");
        String _name_1 = arg.getName();
        _builder.append(_name_1, "  ");
        _builder.append(".\"");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("show_help_and_exit 1");
        _builder.newLine();
        _builder.append("fi;");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  private CharSequence doGenerateDefaults(final List<Argument> arguments) {
    StringConcatenation _builder = new StringConcatenation();
    {
      final Function1<Argument, Boolean> _function = (Argument it) -> {
        String _default = it.getDefault();
        return Boolean.valueOf((!Objects.equal(_default, null)));
      };
      Iterable<Argument> _filter = IterableExtensions.<Argument>filter(arguments, _function);
      for(final Argument arg : _filter) {
        _builder.append("if [ -z \"");
        String _name = arg.getName();
        CharSequence _variable = this.stringUtil.variable(_name);
        _builder.append(_variable, "");
        _builder.append("\"]; then");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        String _name_1 = arg.getName();
        String _variableName = this.stringUtil.variableName(_name_1);
        _builder.append(_variableName, "  ");
        _builder.append("=\"");
        String _default = arg.getDefault();
        _builder.append(_default, "  ");
        _builder.append("\"");
        _builder.newLineIfNotEmpty();
        _builder.append("fi;");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  private CharSequence doGenerateHelp(final Script script) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("This script ");
    String _description = script.getDescription();
    String _ensureSentence = this.stringUtil.ensureSentence(_description);
    _builder.append(_ensureSentence, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("Usage:");
    _builder.newLine();
    String _name = script.getName();
    _builder.append(_name, "");
    _builder.append(" [ -h | --help | OPTIONS ]");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("Options:");
    _builder.newLine();
    {
      EList<Argument> _arguments = script.getArguments();
      for(final Argument arg : _arguments) {
        _builder.append("  ");
        CharSequence _doGenerateHelp = this.doGenerateHelp(arg);
        _builder.append(_doGenerateHelp, "  ");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  private CharSequence doGenerateHelp(final Argument argument) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = argument.getName();
    _builder.append(_name, "");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    {
      boolean _isOptional = argument.isOptional();
      if (_isOptional) {
        _builder.append("Optional. ");
      }
    }
    {
      String _default = argument.getDefault();
      boolean _notEquals = (!Objects.equal(_default, null));
      if (_notEquals) {
        _builder.append("Default: ");
        String _default_1 = argument.getDefault();
        _builder.append(_default_1, "  ");
        _builder.append(".");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    String _description = argument.getDescription();
    String _ensureSentence = this.stringUtil.ensureSentence(_description);
    _builder.append(_ensureSentence, "  ");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence doGenerateInitialize(final List<Argument> arguments) {
    StringConcatenation _builder = new StringConcatenation();
    {
      for(final Argument arg : arguments) {
        String _name = arg.getName();
        String _variableName = this.stringUtil.variableName(_name);
        _builder.append(_variableName, "");
        _builder.append("=");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  private CharSequence doGenerateRead(final List<Argument> arguments) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("while [[ $# > 0 ]]");
    _builder.newLine();
    _builder.append("do");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("key=\"$1\"");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("case $key in");
    _builder.newLine();
    _builder.append("    ");
    {
      for(final Argument arg : arguments) {
        CharSequence _doGenerateRead = this.doGenerateRead(arg);
        _builder.append(_doGenerateRead, "    ");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("-h|--help)");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("show_help_and_exit 0;;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("*)");
    _builder.newLine();
    _builder.append("      ");
    _builder.append(">&2 echo \"Unkown option $1 with value $2.\"");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("echo");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("show_help_and_exit 2");
    _builder.newLine();
    _builder.append("      ");
    _builder.append(";;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("esac");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("shift # past argument");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("shift # past argument");
    _builder.newLine();
    _builder.append("done");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence doGenerateRead(final Argument argument) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = argument.getName();
    _builder.append(_name, "");
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    String _name_1 = argument.getName();
    String _variableName = this.stringUtil.variableName(_name_1);
    _builder.append(_variableName, "  ");
    _builder.append("=\"$2\";;");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
