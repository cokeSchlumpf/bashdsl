/*
 * generated by Xtext
 */
grammar InternalBashDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.wellnr.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.wellnr.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.wellnr.services.BashDSLGrammarAccess;

}

@parser::members {

 	private BashDSLGrammarAccess grammarAccess;
 	
    public InternalBashDSLParser(TokenStream input, BashDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Domainmodel";	
   	}
   	
   	@Override
   	protected BashDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDomainmodel
entryRuleDomainmodel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainmodelRule()); }
	 iv_ruleDomainmodel=ruleDomainmodel 
	 { $current=$iv_ruleDomainmodel.current; } 
	 EOF 
;

// Rule Domainmodel
ruleDomainmodel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainmodelAccess().getElementsScriptParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleScript		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainmodelRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"Script");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleScript
entryRuleScript returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScriptRule()); }
	 iv_ruleScript=ruleScript 
	 { $current=$iv_ruleScript.current; } 
	 EOF 
;

// Rule Script
ruleScript returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='script' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getScriptAccess().getScriptKeyword_0());
    }
(
(
		lv_name_1_0=RULE_FILENAME
		{
			newLeafNode(lv_name_1_0, grammarAccess.getScriptAccess().getNameFILENAMETerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScriptRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"FILENAME");
	    }

)
)(
(
		lv_description_2_0=RULE_STRING
		{
			newLeafNode(lv_description_2_0, grammarAccess.getScriptAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScriptRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_2_0, 
        		"STRING");
	    }

)
)(	otherlv_3='copyright' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getScriptAccess().getCopyrightKeyword_3_0());
    }
(
(
		lv_copyright_4_0=RULE_STRING
		{
			newLeafNode(lv_copyright_4_0, grammarAccess.getScriptAccess().getCopyrightSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScriptRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"copyright",
        		lv_copyright_4_0, 
        		"STRING");
	    }

)
))?	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getScriptAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScriptAccess().getArgumentsArgumentParserRuleCall_5_0()); 
	    }
		lv_arguments_6_0=ruleArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_6_0, 
        		"Argument");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_code_7_0=RULE_CODE_BLOCK
		{
			newLeafNode(lv_code_7_0, grammarAccess.getScriptAccess().getCodeCODE_BLOCKTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScriptRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"code",
        		lv_code_7_0, 
        		"CODE_BLOCK");
	    }

)
)?	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getScriptAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleArgument
entryRuleArgument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentRule()); }
	 iv_ruleArgument=ruleArgument 
	 { $current=$iv_ruleArgument.current; } 
	 EOF 
;

// Rule Argument
ruleArgument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_optional_0_0=	'optional' 
    {
        newLeafNode(lv_optional_0_0, grammarAccess.getArgumentAccess().getOptionalOptionalKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentRule());
	        }
       		setWithLastConsumed($current, "optional", true, "optional");
	    }

)
)?	otherlv_1='argument' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArgumentAccess().getArgumentKeyword_1());
    }
(
(
		lv_name_2_0=RULE_STRING
		{
			newLeafNode(lv_name_2_0, grammarAccess.getArgumentAccess().getNameSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"STRING");
	    }

)
)(	otherlv_3='with default' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArgumentAccess().getWithDefaultKeyword_3_0());
    }
(
(
		lv_default_4_0=RULE_STRING
		{
			newLeafNode(lv_default_4_0, grammarAccess.getArgumentAccess().getDefaultSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"default",
        		lv_default_4_0, 
        		"STRING");
	    }

)
))?(
(
		lv_description_5_0=RULE_STRING
		{
			newLeafNode(lv_description_5_0, grammarAccess.getArgumentAccess().getDescriptionSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_5_0, 
        		"STRING");
	    }

)
))
;





RULE_FILENAME : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'.'|'0'..'9')*;

RULE_CODE_BLOCK : '"""' ( options {greedy=false;} : . )*'"""';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


