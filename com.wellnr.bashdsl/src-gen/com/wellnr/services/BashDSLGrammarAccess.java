/*
 * generated by Xtext
 */
package com.wellnr.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class BashDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Domainmodel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsScriptParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Domainmodel:
		//	elements+=Script*;
		@Override public ParserRule getRule() { return rule; }

		//elements+=Script*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//Script
		public RuleCall getElementsScriptParserRuleCall_0() { return cElementsScriptParserRuleCall_0; }
	}

	public class ScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Script");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFILENAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCopyrightKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCopyrightAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCopyrightSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cCopyrightAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cArgumentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cArgumentsArgumentParserRuleCall_5_0 = (RuleCall)cArgumentsAssignment_5.eContents().get(0);
		private final Assignment cCodeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCodeCODE_BLOCKTerminalRuleCall_6_0 = (RuleCall)cCodeAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Script:
		//	"script" name=FILENAME description=STRING ("copyright" copyright=STRING)? "{" arguments+=Argument* code=CODE_BLOCK?
		//	"}";
		@Override public ParserRule getRule() { return rule; }

		//"script" name=FILENAME description=STRING ("copyright" copyright=STRING)? "{" arguments+=Argument* code=CODE_BLOCK? "}"
		public Group getGroup() { return cGroup; }

		//"script"
		public Keyword getScriptKeyword_0() { return cScriptKeyword_0; }

		//name=FILENAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//FILENAME
		public RuleCall getNameFILENAMETerminalRuleCall_1_0() { return cNameFILENAMETerminalRuleCall_1_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }

		//("copyright" copyright=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"copyright"
		public Keyword getCopyrightKeyword_3_0() { return cCopyrightKeyword_3_0; }

		//copyright=STRING
		public Assignment getCopyrightAssignment_3_1() { return cCopyrightAssignment_3_1; }

		//STRING
		public RuleCall getCopyrightSTRINGTerminalRuleCall_3_1_0() { return cCopyrightSTRINGTerminalRuleCall_3_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//arguments+=Argument*
		public Assignment getArgumentsAssignment_5() { return cArgumentsAssignment_5; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_5_0() { return cArgumentsArgumentParserRuleCall_5_0; }

		//code=CODE_BLOCK?
		public Assignment getCodeAssignment_6() { return cCodeAssignment_6; }

		//CODE_BLOCK
		public RuleCall getCodeCODE_BLOCKTerminalRuleCall_6_0() { return cCodeCODE_BLOCKTerminalRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOptionalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOptionalOptionalKeyword_0_0 = (Keyword)cOptionalAssignment_0.eContents().get(0);
		private final Keyword cArgumentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithDefaultKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefaultAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDefaultAssignment_3_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		
		//Argument:
		//	optional?="optional"? "argument" name=STRING ("with default" default=STRING)? description=STRING;
		@Override public ParserRule getRule() { return rule; }

		//optional?="optional"? "argument" name=STRING ("with default" default=STRING)? description=STRING
		public Group getGroup() { return cGroup; }

		//optional?="optional"?
		public Assignment getOptionalAssignment_0() { return cOptionalAssignment_0; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_0_0() { return cOptionalOptionalKeyword_0_0; }

		//"argument"
		public Keyword getArgumentKeyword_1() { return cArgumentKeyword_1; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }

		//("with default" default=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"with default"
		public Keyword getWithDefaultKeyword_3_0() { return cWithDefaultKeyword_3_0; }

		//default=STRING
		public Assignment getDefaultAssignment_3_1() { return cDefaultAssignment_3_1; }

		//STRING
		public RuleCall getDefaultSTRINGTerminalRuleCall_3_1_0() { return cDefaultSTRINGTerminalRuleCall_3_1_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0() { return cDescriptionSTRINGTerminalRuleCall_4_0; }
	}
	
	
	private final DomainmodelElements pDomainmodel;
	private final ScriptElements pScript;
	private final ArgumentElements pArgument;
	private final TerminalRule tFILENAME;
	private final TerminalRule tCODE_BLOCK;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BashDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainmodel = new DomainmodelElements();
		this.pScript = new ScriptElements();
		this.pArgument = new ArgumentElements();
		this.tFILENAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FILENAME");
		this.tCODE_BLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CODE_BLOCK");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.wellnr.BashDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Domainmodel:
	//	elements+=Script*;
	public DomainmodelElements getDomainmodelAccess() {
		return pDomainmodel;
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}

	//Script:
	//	"script" name=FILENAME description=STRING ("copyright" copyright=STRING)? "{" arguments+=Argument* code=CODE_BLOCK?
	//	"}";
	public ScriptElements getScriptAccess() {
		return pScript;
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}

	//Argument:
	//	optional?="optional"? "argument" name=STRING ("with default" default=STRING)? description=STRING;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//terminal FILENAME:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "-" | "." | "0".."9")*;
	public TerminalRule getFILENAMERule() {
		return tFILENAME;
	} 

	//terminal CODE_BLOCK:
	//	"\"\"\""->"\"\"\"";
	public TerminalRule getCODE_BLOCKRule() {
		return tCODE_BLOCK;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
