/*
 * generated by Xtext
 */
package com.wellnr.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class BashDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Domainmodel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGenerateReadmeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReadmeTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReadmeTitleSTRINGTerminalRuleCall_1_0 = (RuleCall)cReadmeTitleAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cReadmeIntroAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cReadmeIntroSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cReadmeIntroAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsScriptParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		
		//Domainmodel:
		//	"@GenerateReadme(" readmeTitle=STRING ("," readmeIntro=STRING)? ")" elements+=Script*;
		@Override public ParserRule getRule() { return rule; }

		//"@GenerateReadme(" readmeTitle=STRING ("," readmeIntro=STRING)? ")" elements+=Script*
		public Group getGroup() { return cGroup; }

		//"@GenerateReadme("
		public Keyword getGenerateReadmeKeyword_0() { return cGenerateReadmeKeyword_0; }

		//readmeTitle=STRING
		public Assignment getReadmeTitleAssignment_1() { return cReadmeTitleAssignment_1; }

		//STRING
		public RuleCall getReadmeTitleSTRINGTerminalRuleCall_1_0() { return cReadmeTitleSTRINGTerminalRuleCall_1_0; }

		//("," readmeIntro=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//readmeIntro=STRING
		public Assignment getReadmeIntroAssignment_2_1() { return cReadmeIntroAssignment_2_1; }

		//STRING
		public RuleCall getReadmeIntroSTRINGTerminalRuleCall_2_1_0() { return cReadmeIntroSTRINGTerminalRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//elements+=Script*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }

		//Script
		public RuleCall getElementsScriptParserRuleCall_4_0() { return cElementsScriptParserRuleCall_4_0; }
	}

	public class ScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Script");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCopyrightKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCopyrightAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCopyrightSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cCopyrightAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLongDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLongDescriptionDescriptionParserRuleCall_5_0 = (RuleCall)cLongDescriptionAssignment_5.eContents().get(0);
		private final Assignment cVariablesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVariablesEnvironmentVariableParserRuleCall_6_0 = (RuleCall)cVariablesAssignment_6.eContents().get(0);
		private final Assignment cArgumentsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cArgumentsArgumentParserRuleCall_7_0 = (RuleCall)cArgumentsAssignment_7.eContents().get(0);
		private final Assignment cOptArgumentsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOptArgumentsOptionalArgumentParserRuleCall_8_0 = (RuleCall)cOptArgumentsAssignment_8.eContents().get(0);
		private final Assignment cFunctionsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cFunctionsFunctionParserRuleCall_9_0 = (RuleCall)cFunctionsAssignment_9.eContents().get(0);
		private final Assignment cCodeAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cCodeCODE_BLOCKTerminalRuleCall_10_0 = (RuleCall)cCodeAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Script:
		//	"script" name=ID description=STRING ("copyright" copyright=STRING)? "{" longDescription=Description?
		//	variables+=EnvironmentVariable* arguments+=Argument* optArguments+=OptionalArgument* functions+=Function*
		//	code=CODE_BLOCK "}";
		@Override public ParserRule getRule() { return rule; }

		//"script" name=ID description=STRING ("copyright" copyright=STRING)? "{" longDescription=Description?
		//variables+=EnvironmentVariable* arguments+=Argument* optArguments+=OptionalArgument* functions+=Function*
		//code=CODE_BLOCK "}"
		public Group getGroup() { return cGroup; }

		//"script"
		public Keyword getScriptKeyword_0() { return cScriptKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }

		//("copyright" copyright=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"copyright"
		public Keyword getCopyrightKeyword_3_0() { return cCopyrightKeyword_3_0; }

		//copyright=STRING
		public Assignment getCopyrightAssignment_3_1() { return cCopyrightAssignment_3_1; }

		//STRING
		public RuleCall getCopyrightSTRINGTerminalRuleCall_3_1_0() { return cCopyrightSTRINGTerminalRuleCall_3_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//longDescription=Description?
		public Assignment getLongDescriptionAssignment_5() { return cLongDescriptionAssignment_5; }

		//Description
		public RuleCall getLongDescriptionDescriptionParserRuleCall_5_0() { return cLongDescriptionDescriptionParserRuleCall_5_0; }

		//variables+=EnvironmentVariable*
		public Assignment getVariablesAssignment_6() { return cVariablesAssignment_6; }

		//EnvironmentVariable
		public RuleCall getVariablesEnvironmentVariableParserRuleCall_6_0() { return cVariablesEnvironmentVariableParserRuleCall_6_0; }

		//arguments+=Argument*
		public Assignment getArgumentsAssignment_7() { return cArgumentsAssignment_7; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_7_0() { return cArgumentsArgumentParserRuleCall_7_0; }

		//optArguments+=OptionalArgument*
		public Assignment getOptArgumentsAssignment_8() { return cOptArgumentsAssignment_8; }

		//OptionalArgument
		public RuleCall getOptArgumentsOptionalArgumentParserRuleCall_8_0() { return cOptArgumentsOptionalArgumentParserRuleCall_8_0; }

		//functions+=Function*
		public Assignment getFunctionsAssignment_9() { return cFunctionsAssignment_9; }

		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_9_0() { return cFunctionsFunctionParserRuleCall_9_0; }

		//code=CODE_BLOCK
		public Assignment getCodeAssignment_10() { return cCodeAssignment_10; }

		//CODE_BLOCK
		public RuleCall getCodeCODE_BLOCKTerminalRuleCall_10_0() { return cCodeCODE_BLOCKTerminalRuleCall_10_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class DescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Description");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueCODE_BLOCKTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Description:
		//	"description" value=CODE_BLOCK;
		@Override public ParserRule getRule() { return rule; }

		//"description" value=CODE_BLOCK
		public Group getGroup() { return cGroup; }

		//"description"
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }

		//value=CODE_BLOCK
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//CODE_BLOCK
		public RuleCall getValueCODE_BLOCKTerminalRuleCall_1_0() { return cValueCODE_BLOCKTerminalRuleCall_1_0; }
	}

	public class AbstractArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArgumentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOptionalArgumentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractArgument:
		//	Argument | OptionalArgument;
		@Override public ParserRule getRule() { return rule; }

		//Argument | OptionalArgument
		public Alternatives getAlternatives() { return cAlternatives; }

		//Argument
		public RuleCall getArgumentParserRuleCall_0() { return cArgumentParserRuleCall_0; }

		//OptionalArgument
		public RuleCall getOptionalArgumentParserRuleCall_1() { return cOptionalArgumentParserRuleCall_1; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArgumentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRemainingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cRemainingReadsRemainingKeyword_2_0 = (Keyword)cRemainingAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		
		//Argument:
		//	"argument" name=STRING remaining?="reads remaining"? description=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"argument" name=STRING remaining?="reads remaining"? description=STRING
		public Group getGroup() { return cGroup; }

		//"argument"
		public Keyword getArgumentKeyword_0() { return cArgumentKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//remaining?="reads remaining"?
		public Assignment getRemainingAssignment_2() { return cRemainingAssignment_2; }

		//"reads remaining"
		public Keyword getRemainingReadsRemainingKeyword_2_0() { return cRemainingReadsRemainingKeyword_2_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }
	}

	public class OptionalArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionalArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionalArgumentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cAlternatives_2_0.eContents().get(0);
		private final Keyword cWithKeyword_2_0_0_0 = (Keyword)cGroup_2_0_0.eContents().get(0);
		private final Assignment cDynamicDefaultAssignment_2_0_0_1 = (Assignment)cGroup_2_0_0.eContents().get(1);
		private final Keyword cDynamicDefaultDynamicKeyword_2_0_0_1_0 = (Keyword)cDynamicDefaultAssignment_2_0_0_1.eContents().get(0);
		private final Keyword cDefaultKeyword_2_0_0_2 = (Keyword)cGroup_2_0_0.eContents().get(2);
		private final Assignment cDefaultAssignment_2_0_0_3 = (Assignment)cGroup_2_0_0.eContents().get(3);
		private final RuleCall cDefaultSTRINGTerminalRuleCall_2_0_0_3_0 = (RuleCall)cDefaultAssignment_2_0_0_3.eContents().get(0);
		private final Assignment cRemainingAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final Keyword cRemainingReadsRemainingKeyword_2_0_1_0 = (Keyword)cRemainingAssignment_2_0_1.eContents().get(0);
		private final Assignment cIsBooleanAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cIsBooleanWithoutParameterKeyword_2_1_0 = (Keyword)cIsBooleanAssignment_2_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		
		//OptionalArgument:
		//	"optional argument" name=STRING (("with" dynamicDefault?="dynamic"? "default" default=STRING |
		//	remaining?="reads remaining") | isBoolean?="without parameter")? description=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"optional argument" name=STRING (("with" dynamicDefault?="dynamic"? "default" default=STRING |
		//remaining?="reads remaining") | isBoolean?="without parameter")? description=STRING
		public Group getGroup() { return cGroup; }

		//"optional argument"
		public Keyword getOptionalArgumentKeyword_0() { return cOptionalArgumentKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//(("with" dynamicDefault?="dynamic"? "default" default=STRING | remaining?="reads remaining") |
		//isBoolean?="without parameter")?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"with" dynamicDefault?="dynamic"? "default" default=STRING | remaining?="reads remaining"
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//"with" dynamicDefault?="dynamic"? "default" default=STRING
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }

		//"with"
		public Keyword getWithKeyword_2_0_0_0() { return cWithKeyword_2_0_0_0; }

		//dynamicDefault?="dynamic"?
		public Assignment getDynamicDefaultAssignment_2_0_0_1() { return cDynamicDefaultAssignment_2_0_0_1; }

		//"dynamic"
		public Keyword getDynamicDefaultDynamicKeyword_2_0_0_1_0() { return cDynamicDefaultDynamicKeyword_2_0_0_1_0; }

		//"default"
		public Keyword getDefaultKeyword_2_0_0_2() { return cDefaultKeyword_2_0_0_2; }

		//default=STRING
		public Assignment getDefaultAssignment_2_0_0_3() { return cDefaultAssignment_2_0_0_3; }

		//STRING
		public RuleCall getDefaultSTRINGTerminalRuleCall_2_0_0_3_0() { return cDefaultSTRINGTerminalRuleCall_2_0_0_3_0; }

		//remaining?="reads remaining"
		public Assignment getRemainingAssignment_2_0_1() { return cRemainingAssignment_2_0_1; }

		//"reads remaining"
		public Keyword getRemainingReadsRemainingKeyword_2_0_1_0() { return cRemainingReadsRemainingKeyword_2_0_1_0; }

		//isBoolean?="without parameter"
		public Assignment getIsBooleanAssignment_2_1() { return cIsBooleanAssignment_2_1; }

		//"without parameter"
		public Keyword getIsBooleanWithoutParameterKeyword_2_1_0() { return cIsBooleanWithoutParameterKeyword_2_1_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }
	}

	public class EnvironmentVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnvironmentVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnvKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDynamicDefaultAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cDynamicDefaultDynamicKeyword_2_1_0 = (Keyword)cDynamicDefaultAssignment_2_1.eContents().get(0);
		private final Keyword cDefaultKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cDefaultAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cDefaultSTRINGTerminalRuleCall_2_3_0 = (RuleCall)cDefaultAssignment_2_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		
		//EnvironmentVariable:
		//	"env" name=ID ("with" dynamicDefault?="dynamic"? "default" default=STRING)? description=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"env" name=ID ("with" dynamicDefault?="dynamic"? "default" default=STRING)? description=STRING
		public Group getGroup() { return cGroup; }

		//"env"
		public Keyword getEnvKeyword_0() { return cEnvKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("with" dynamicDefault?="dynamic"? "default" default=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"with"
		public Keyword getWithKeyword_2_0() { return cWithKeyword_2_0; }

		//dynamicDefault?="dynamic"?
		public Assignment getDynamicDefaultAssignment_2_1() { return cDynamicDefaultAssignment_2_1; }

		//"dynamic"
		public Keyword getDynamicDefaultDynamicKeyword_2_1_0() { return cDynamicDefaultDynamicKeyword_2_1_0; }

		//"default"
		public Keyword getDefaultKeyword_2_2() { return cDefaultKeyword_2_2; }

		//default=STRING
		public Assignment getDefaultAssignment_2_3() { return cDefaultAssignment_2_3; }

		//STRING
		public RuleCall getDefaultSTRINGTerminalRuleCall_2_3_0() { return cDefaultSTRINGTerminalRuleCall_2_3_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cCodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodeCODE_BLOCKTerminalRuleCall_2_0 = (RuleCall)cCodeAssignment_2.eContents().get(0);
		
		//Function:
		//	"def" name=ID code=CODE_BLOCK;
		@Override public ParserRule getRule() { return rule; }

		//"def" name=ID code=CODE_BLOCK
		public Group getGroup() { return cGroup; }

		//"def"
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//code=CODE_BLOCK
		public Assignment getCodeAssignment_2() { return cCodeAssignment_2; }

		//CODE_BLOCK
		public RuleCall getCodeCODE_BLOCKTerminalRuleCall_2_0() { return cCodeCODE_BLOCKTerminalRuleCall_2_0; }
	}
	
	
	private final DomainmodelElements pDomainmodel;
	private final ScriptElements pScript;
	private final DescriptionElements pDescription;
	private final AbstractArgumentElements pAbstractArgument;
	private final ArgumentElements pArgument;
	private final OptionalArgumentElements pOptionalArgument;
	private final EnvironmentVariableElements pEnvironmentVariable;
	private final FunctionElements pFunction;
	private final TerminalRule tID;
	private final TerminalRule tCODE_BLOCK;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BashDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainmodel = new DomainmodelElements();
		this.pScript = new ScriptElements();
		this.pDescription = new DescriptionElements();
		this.pAbstractArgument = new AbstractArgumentElements();
		this.pArgument = new ArgumentElements();
		this.pOptionalArgument = new OptionalArgumentElements();
		this.pEnvironmentVariable = new EnvironmentVariableElements();
		this.pFunction = new FunctionElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.tCODE_BLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CODE_BLOCK");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.wellnr.BashDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Domainmodel:
	//	"@GenerateReadme(" readmeTitle=STRING ("," readmeIntro=STRING)? ")" elements+=Script*;
	public DomainmodelElements getDomainmodelAccess() {
		return pDomainmodel;
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}

	//Script:
	//	"script" name=ID description=STRING ("copyright" copyright=STRING)? "{" longDescription=Description?
	//	variables+=EnvironmentVariable* arguments+=Argument* optArguments+=OptionalArgument* functions+=Function*
	//	code=CODE_BLOCK "}";
	public ScriptElements getScriptAccess() {
		return pScript;
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}

	//Description:
	//	"description" value=CODE_BLOCK;
	public DescriptionElements getDescriptionAccess() {
		return pDescription;
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}

	//AbstractArgument:
	//	Argument | OptionalArgument;
	public AbstractArgumentElements getAbstractArgumentAccess() {
		return pAbstractArgument;
	}
	
	public ParserRule getAbstractArgumentRule() {
		return getAbstractArgumentAccess().getRule();
	}

	//Argument:
	//	"argument" name=STRING remaining?="reads remaining"? description=STRING;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//OptionalArgument:
	//	"optional argument" name=STRING (("with" dynamicDefault?="dynamic"? "default" default=STRING |
	//	remaining?="reads remaining") | isBoolean?="without parameter")? description=STRING;
	public OptionalArgumentElements getOptionalArgumentAccess() {
		return pOptionalArgument;
	}
	
	public ParserRule getOptionalArgumentRule() {
		return getOptionalArgumentAccess().getRule();
	}

	//EnvironmentVariable:
	//	"env" name=ID ("with" dynamicDefault?="dynamic"? "default" default=STRING)? description=STRING;
	public EnvironmentVariableElements getEnvironmentVariableAccess() {
		return pEnvironmentVariable;
	}
	
	public ParserRule getEnvironmentVariableRule() {
		return getEnvironmentVariableAccess().getRule();
	}

	//Function:
	//	"def" name=ID code=CODE_BLOCK;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//terminal ID:
	//	("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "_" | "-" | "0".."9")*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal CODE_BLOCK:
	//	"{{{"->"}}}";
	public TerminalRule getCODE_BLOCKRule() {
		return tCODE_BLOCK;
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
